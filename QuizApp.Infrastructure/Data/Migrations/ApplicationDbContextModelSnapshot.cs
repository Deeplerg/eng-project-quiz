// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Npgsql.EntityFrameworkCore.PostgreSQL.Metadata;
using QuizApp.Infrastructure.Data;

#nullable disable

namespace QuizApp.Infrastructure.Data.Migrations
{
    [DbContext(typeof(ApplicationDbContext))]
    partial class ApplicationDbContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "8.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 63);

            NpgsqlModelBuilderExtensions.UseIdentityByDefaultColumns(modelBuilder);

            modelBuilder.HasSequence("AnswerSequence");

            modelBuilder.HasSequence("QuestionSequence");

            modelBuilder.HasSequence("QuizResultSequence");

            modelBuilder.HasSequence("QuizSequence");

            modelBuilder.HasSequence("QuizSubmissionSequence");

            modelBuilder.Entity("QuizApp.Core.Entities.Answer", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"AnswerSequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuestionId")
                        .HasColumnType("integer");

                    b.Property<int>("Score")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuestionId");

                    b.ToTable("PossibleAnswers", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("QuizApp.Core.Entities.Question", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"QuestionSequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("Questions", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("QuizApp.Core.Entities.Quiz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"QuizSequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("text");

                    b.HasKey("Id");

                    b.ToTable("Quizzes", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("QuizApp.Core.Entities.QuizResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"QuizResultSequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("text");

                    b.Property<int>("FromScore")
                        .HasColumnType("integer");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.HasKey("Id");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizResults", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("QuizApp.Core.Entities.QuizSubmission", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("integer")
                        .HasDefaultValueSql("nextval('\"QuizSubmissionSequence\"')");

                    NpgsqlPropertyBuilderExtensions.UseSequence(b.Property<int>("Id"));

                    b.Property<int>("ParentQuizId")
                        .HasColumnType("integer");

                    b.Property<DateTimeOffset>("SubmissionDate")
                        .HasColumnType("timestamp with time zone");

                    b.HasKey("Id");

                    b.HasIndex("ParentQuizId");

                    b.ToTable("QuizSubmissions", (string)null);

                    b.UseTpcMappingStrategy();
                });

            modelBuilder.Entity("QuizSubmissionAnswers", b =>
                {
                    b.Property<int>("PossibleAnswerId")
                        .HasColumnType("integer");

                    b.Property<int>("QuizId")
                        .HasColumnType("integer");

                    b.HasKey("PossibleAnswerId", "QuizId");

                    b.HasIndex("QuizId");

                    b.ToTable("QuizSubmissionAnswers");
                });

            modelBuilder.Entity("QuizApp.Core.Entities.Answer", b =>
                {
                    b.HasOne("QuizApp.Core.Entities.Question", "Question")
                        .WithMany("PossibleAnswers")
                        .HasForeignKey("QuestionId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Question");
                });

            modelBuilder.Entity("QuizApp.Core.Entities.Question", b =>
                {
                    b.HasOne("QuizApp.Core.Entities.Quiz", "Quiz")
                        .WithMany("Questions")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizApp.Core.Entities.QuizResult", b =>
                {
                    b.HasOne("QuizApp.Core.Entities.Quiz", "Quiz")
                        .WithMany("PossibleResults")
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Quiz");
                });

            modelBuilder.Entity("QuizApp.Core.Entities.QuizSubmission", b =>
                {
                    b.HasOne("QuizApp.Core.Entities.Quiz", "ParentQuiz")
                        .WithMany()
                        .HasForeignKey("ParentQuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("ParentQuiz");
                });

            modelBuilder.Entity("QuizSubmissionAnswers", b =>
                {
                    b.HasOne("QuizApp.Core.Entities.Answer", null)
                        .WithMany()
                        .HasForeignKey("PossibleAnswerId")
                        .OnDelete(DeleteBehavior.Restrict)
                        .IsRequired();

                    b.HasOne("QuizApp.Core.Entities.QuizSubmission", null)
                        .WithMany()
                        .HasForeignKey("QuizId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("QuizApp.Core.Entities.Question", b =>
                {
                    b.Navigation("PossibleAnswers");
                });

            modelBuilder.Entity("QuizApp.Core.Entities.Quiz", b =>
                {
                    b.Navigation("PossibleResults");

                    b.Navigation("Questions");
                });
#pragma warning restore 612, 618
        }
    }
}
